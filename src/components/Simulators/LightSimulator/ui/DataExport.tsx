import React, { useState } from 'react';

interface DataPoint {
  timestamp: string;
  simulator: string;
  parameters: Record<string, any>;
  calculations: Record<string, any>;
}

interface DataExportProps {
  simulatorType: string;
  parameters: Record<string, any>;
  calculations: Record<string, any>;
  className?: string;
}

export const DataExport: React.FC<DataExportProps> = ({ 
  simulatorType,
  parameters,
  calculations,
  className = "" 
}) => {
  const [exportFormat, setExportFormat] = useState<'json' | 'csv' | 'txt'>('json');

  const generateData = (): DataPoint => {
    return {
      timestamp: new Date().toISOString(),
      simulator: simulatorType,
      parameters,
      calculations
    };
  };

  const exportToJSON = () => {
    const data = generateData();
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${simulatorType}_data_${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const exportToCSV = () => {
    const data = generateData();
    const csvContent = [
      ['Parameter', 'Value'],
      ...Object.entries(data.parameters).map(([key, value]) => [key, String(value)]),
      ['', ''],
      ['Calculation', 'Value'],
      ...Object.entries(data.calculations).map(([key, value]) => [key, String(value)]),
    ].map(row => row.join(',')).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${simulatorType}_data_${new Date().toISOString().split('T')[0]}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const exportToTXT = () => {
    const data = generateData();
    const txtContent = `
Optics Simulator Data Export
Generated: ${data.timestamp}
Simulator: ${data.simulator}

PARAMETERS:
${Object.entries(data.parameters).map(([key, value]) => `${key}: ${value}`).join('\n')}

CALCULATIONS:
${Object.entries(data.calculations).map(([key, value]) => `${key}: ${value}`).join('\n')}

---
Generated by Optics Physics Simulator
    `.trim();

    const blob = new Blob([txtContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${simulatorType}_data_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleExport = () => {
    switch (exportFormat) {
      case 'json':
        exportToJSON();
        break;
      case 'csv':
        exportToCSV();
        break;
      case 'txt':
        exportToTXT();
        break;
    }
  };

  const copyToClipboard = async () => {
    const data = generateData();
    const text = JSON.stringify(data, null, 2);
    try {
      await navigator.clipboard.writeText(text);
      // You could add a toast notification here
      alert('Data copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
    }
  };

  return (
    <div className={`bg-gray-800/50 rounded-lg p-4 border border-gray-600 ${className}`}>
      <h3 className="text-lg font-semibold text-white mb-3 flex items-center">
        <svg className="w-5 h-5 mr-2 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        Export Data
      </h3>
      
      <div className="space-y-3">
        <div>
          <label className="block text-white font-semibold mb-2">Export Format</label>
          <select
            value={exportFormat}
            onChange={(e) => setExportFormat(e.target.value as 'json' | 'csv' | 'txt')}
            className="w-full px-3 py-2 bg-gray-700 text-white rounded-md border border-gray-600"
          >
            <option value="json">JSON</option>
            <option value="csv">CSV</option>
            <option value="txt">Text</option>
          </select>
        </div>

        <div className="flex gap-2">
          <button
            onClick={handleExport}
            className="flex-1 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md font-semibold transition-colors"
          >
            Export
          </button>
          <button
            onClick={copyToClipboard}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-semibold transition-colors"
            title="Copy to clipboard"
          >
            ðŸ“‹
          </button>
        </div>

        <div className="text-xs text-gray-400">
          <p>â€¢ JSON: Complete data with structure</p>
          <p>â€¢ CSV: Tabular format for Excel</p>
          <p>â€¢ TXT: Human-readable format</p>
        </div>
      </div>
    </div>
  );
};
